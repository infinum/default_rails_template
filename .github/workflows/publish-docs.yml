name: Publish docs

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # Selects the version of Postgres for running tests
      # See: https://github.com/docker-library/docs/blob/master/postgres/README.md#supported-tags-and-respective-dockerfile-links
      postgres_image:
        required: true
        type: string

      # Sets BUNDLE_APP_CONFIG environment variable
      # See: https://bundler.io/man/bundle-config.1.html
      bundle_app_config:
        required: false
        type: string
        default: .bundle/ci-deploy

      # Selects the runner on which the workflow will run
      # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      runner:
        required: false
        type: string
        default: ubuntu-20.04

      # Determines whether to install Node and run `yarn install`
      use_node:
        required: false
        type: boolean
        default: true

      # Sets the Mina environment (e.g. staging, production)
      # A task by the same name must exist in config/deploy.rb
      environment:
        required: true
        type: string

      # Sets the Git branch which will be checked out
      branch:
        required: true
        type: string

    secrets:
      SSH_PRIVATE_KEY:
        required: true
      VAULT_ADDR:
        required: true
      VAULT_AUTH_METHOD:
        required: true
      VAULT_AUTH_ROLE_ID:
        required: true
      VAULT_AUTH_SECRET_ID:
        required: true

      # Additional environment variables set in the workflow
      # Format: JSON object with string values (key becomes env variable name, value becomes env variable value)
      # Example: '{ "FOO": "BAR", "BAZ": "${{ secrets.BAZ }}" }' 
      ADDITIONAL_VARIABLES:
        required: false

jobs:
  publish_docs:
    name: 'Publish docs'
    runs-on: ${{ inputs.runner }}
    env:
      BUNDLE_APP_CONFIG: ${{ inputs.bundle_app_config }}
    services:
      postgres:
        image: postgres:${{ inputs.postgres_image }}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --name=postgres
    steps:
      - name: Set up additional environment variables
        env:
          ADDITIONAL_VARIABLES: ${{ secrets.ADDITIONAL_VARIABLES }}
        if: ${{ env.ADDITIONAL_VARIABLES }}
        run: >
          if echo '${{ env.ADDITIONAL_VARIABLES }}' | jq >/dev/null 2>&1; then
            echo '${{ env.ADDITIONAL_VARIABLES }}' | jq -r 'to_entries[] | "\(.key) \(.value)"' | \
              while read -r key value; do echo "$key=$value" >> $GITHUB_ENV && echo "Variable $key has been set"; done
          else
            echo "ADDITIONAL_VARIABLES secret you supplied is not a valid JSON object. Check the formatting of the secret."
            exit 1
          fi
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch }}
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Set up Node
        uses: actions/setup-node@v2
        if: ${{ inputs.use_node }}
        with:
          node-version-file: '.node-version'
      - name: Prepare node_modules cache
        uses: actions/cache@v2
        if: ${{ inputs.use_node }}
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install JS packages
        if: ${{ inputs.use_node }}
        run: yarn install --frozen-lockfile
      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Prepare CI
        run: bin/prepare_ci
        if: hashFiles('bin/prepare_ci') != ''
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
          VAULT_AUTH_ROLE_ID: ${{ secrets.VAULT_AUTH_ROLE_ID }}
          VAULT_AUTH_SECRET_ID: ${{ secrets.VAULT_AUTH_SECRET_ID }}
      - name: Wait for Postgres to be ready
        run: until docker exec postgres pg_isready; do sleep 1; done
      - name: Publish docs
        run: 'bin/publish_docs ${{ inputs.environment }}'
        env:
          RAILS_ENV: test
