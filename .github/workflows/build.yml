name: Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      # Selects the version of Postgres for running tests
      # See: https://github.com/docker-library/docs/blob/master/postgres/README.md#supported-tags-and-respective-dockerfile-links
      postgres_image:
        required: true
        type: string

      # Determines whether to install Node and run `yarn install`
      use_node:
        required: false
        type: boolean
        default: true

      # Determines the path to the aptfile to select which apt packages get installed on the build runner
      aptfile:
        required: false
        type: string

      # Sets BUNDLE_APP_CONFIG environment variable
      # See: https://bundler.io/man/bundle-config.1.html
      bundle_app_config:
        required: false
        type: string
        default: .bundle/ci-build

      # Selects the runner on which the workflow will run
      # See: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      runner:
        required: false
        type: string
        default: ubuntu-20.04

      # Defines which scripts will run on CI
      # Format: space-delimited paths to scripts
      # Example: 'bin/audit bin/lint bin/test'
      ci_steps:
        required: true
        type: string

      # Defines the Slack channel to which a notification will be sent upon completion of the workflow
      # Format: channel name (without the #)
      # Example: 'my-channel-name'
      slack_notification_channel:
        required: false
        type: string

      # Defines on which events the notification is sent to the Slack channel defined in `slack_notification_channel` input
      # By default, all events will trigger a notification
      # Enum: success | failure | all
      notify_on:
        required: false
        type: string
        default: all
    secrets:
      VAULT_ADDR:
        required: true
      VAULT_AUTH_METHOD:
        required: true
      VAULT_AUTH_ROLE_ID:
        required: true
      VAULT_AUTH_SECRET_ID:
        required: true
      SLACK_BOT_TOKEN:
        required: false

      # Additional environment variables set in the workflow
      # Format: JSON object with string values (key becomes env variable name, value becomes env variable value)
      # Example: '{ "FOO": "BAR", "BAZ": "${{ secrets.BAZ }}" }' 
      ADDITIONAL_VARIABLES:
        required: false

jobs:
  build:
    name: 'Build'
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 30
    env:
      BUNDLE_APP_CONFIG: ${{ inputs.bundle_app_config }}
      RUBOCOP_CACHE_ROOT: .rubocop-cache
    services:
      postgres:
        image: postgres:${{ inputs.postgres_image }}
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --name=postgres
    steps:
      - name: Set up additional environment variables
        env:
          ADDITIONAL_VARIABLES: ${{ secrets.ADDITIONAL_VARIABLES }}
        if: ${{ env.ADDITIONAL_VARIABLES }}
        run: >
          if echo '${{ env.ADDITIONAL_VARIABLES }}' | jq >/dev/null 2>&1; then
            echo '${{ env.ADDITIONAL_VARIABLES }}' | jq -r 'to_entries[] | "\(.key) \(.value)"' | \
              while read -r key value; do echo "$key=$value" >> $GITHUB_ENV && echo "Variable $key has been set"; done
          else
            echo "ADDITIONAL_VARIABLES secret you supplied is not a valid JSON object. Check the formatting of the secret."
            exit 1
          fi
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Prepare RuboCop cache
        uses: actions/cache@v2
        with:
          path: ${{ env.RUBOCOP_CACHE_ROOT }}
          key: ${{ runner.os }}-rubocop-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-rubocop-cache-
      - name: Fetch Aptfile
        if: ${{ startsWith(inputs.runner, 'ubuntu' && inputs.aptfile }}
        id: apt_packages
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{ inputs.aptfile }}
      - name: Install dependencies
        if: ${{ startsWith(inputs.runner, 'ubuntu') && inputs.aptfile }}
        run: sudo apt install $aptfile
        env:
          aptfile: "${{ steps.apt_packages.outputs.content }}"
      - name: Set up Node
        uses: actions/setup-node@v2
        if: ${{ inputs.use_node }}
        with:
          node-version-file: '.node-version'
      - name: Prepare node_modules cache
        uses: actions/cache@v2
        if: ${{ inputs.use_node }}
        with:
          path: node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install JS packages
        if: ${{ inputs.use_node }}
        run: yarn install --frozen-lockfile
      - name: Prepare CI
        run: bin/prepare_ci
        if: hashFiles('bin/prepare_ci') != ''
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_AUTH_METHOD: ${{ secrets.VAULT_AUTH_METHOD }}
          VAULT_AUTH_ROLE_ID: ${{ secrets.VAULT_AUTH_ROLE_ID }}
          VAULT_AUTH_SECRET_ID: ${{ secrets.VAULT_AUTH_SECRET_ID }}
      - name: Wait for Postgres to be ready
        run: until docker exec postgres pg_isready; do sleep 1; done
      - name: CI steps
        id: ci_steps
        run: 'parallel --lb -k -j0 ::: ${{ inputs.ci_steps }}'
        env:
          RAILS_ENV: test
      - name: Notify on Slack
        env:
          SUCCESS: ${{ steps.ci_steps.outcome == 'success' }}
          FAILURE: ${{ steps.ci_steps.outcome == 'failure' }}
          CHANNEL: ${{ inputs.slack_notification_channel }}
          NOTIFY_ON: ${{ inputs.notify_on }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ always() && inputs.slack_notification_channel }}
        run: |
          if [ -z "$SLACK_BOT_TOKEN" ] ; then
            echo "SLACK_BOT_TOKEN secret is missing from the workflow!"
            exit 1
          fi

          if [[ "$NOTIFY_ON" != "success" && "$NOTIFY_ON" != "failure" && "$NOTIFY_ON" != "all" ]] ; then
            echo "notify_on input is not valid. Must be one of: 'success', 'failure', or 'all'"
            exit 1
          fi

          SHORT_SHA=$(git rev-parse --short HEAD)
          FULL_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git show -s --format=%s)
          GITHUB_PR_URL=$(gh pr view --json url --jq .url || true)
          GITHUB_PR_NUMBER=$(gh pr view --json number --jq .number || true)
          GITHUB_RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          GITHUB_COMMIT_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$FULL_SHA"
          GITHUB_BRANCH_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/tree/$GITHUB_REF_NAME"

          if [ -z "$GITHUB_PR_NUMBER" ] ; then
            GITHUB_PR_MESSAGE=""
          else
            GITHUB_PR_MESSAGE="(PR <$GITHUB_PR_URL|#$GITHUB_PR_NUMBER>)"
          fi

          if [[ "$SUCCESS" = true && ("$NOTIFY_ON" = "success" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "attachments": [
                      {
                        "color": "#19a974",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR's <$GITHUB_RUN_URL|build> on <$GITHUB_BRANCH_URL|$GITHUB_REF_NAME> passed $GITHUB_PR_MESSAGE \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi

          if [[ "$FAILURE" = true && ("$NOTIFY_ON" = "failure" || "$NOTIFY_ON" = "all") ]] ; then
            curl -X POST https://slack.com/api/chat.postMessage \
                 -H "Content-type: application/json; charset=utf-8" \
                 -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                 -s -S \
                 -d @- <<- EOF
                  {
                    "channel": "$CHANNEL",
                    "attachments": [
                      {
                        "color": "#f75819",
                        "blocks": [
                          {
                            "type": "section",
                            "text": {
                              "type": "mrkdwn",
                              "text": "$GITHUB_ACTOR's <$GITHUB_RUN_URL|build> on <$GITHUB_BRANCH_URL|$GITHUB_REF_NAME> failed $GITHUB_PR_MESSAGE \n _ $COMMIT_MESSAGE _ (<$GITHUB_COMMIT_URL|$SHORT_SHA>)"
                            }
                          }
                        ]
                      }
                    ]
                  }
          EOF
          fi
